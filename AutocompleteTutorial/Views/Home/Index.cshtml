

<div class="tutorialBody">

    <script>
        $(function () {
            $("#example1a").autocomplete({
                source: "/home/suggest?highlights=false&fuzzy=false&",
                minLength: 3,
                position: {
                    my: "left top",
                    at: "left-23 bottom+10"
                }
            });
        });
    </script>

    <div class="example">
        <h2 class="exampleTitle">Suggestions</h2>
        <div class="exampleText">
            Suggestions provide recommendations of actual results based on what the user has typed so far.  Typically, these are shown in a list below the search box and selecting an option navigates the user directly to what they are looking for instead of having to first go to a search results page and navigate from there.
            You can use the <a href="https://docs.microsoft.com/en-us/rest/api/searchservice/suggestions">SUGGEST</a> method on the Azure Search REST API to retrieve suggestions for a search term.<br /><br />
            Example: The suggestions provided in this tutorial are jobs from the NYCJobs sample. Give "exec" a try in the box below to see what the SUGGEST API returns.
        </div>
        <br />
        <div class="searchBoxForm">
            <input class="searchBox" type="text" id="example1a" placeholder="search">
            <input type="submit" class="searchBoxSubmit">
        </div>
    </div>
    <br />

    <script>
        $(function () {
            $("#example1b").autocomplete({
                html: true,
                source: "/home/suggest?highlights=true&fuzzy=false&",
                minLength: 3,
                position: {
                    my: "left top",
                    at: "left-23 bottom+10"
                }
            }).data("ui-autocomplete")._renderItem = function (ul, item) {
                return $("<li></li>")
                    .data("item.autocomplete", item)
                    .append("<a>" + item.label + "</a>")
                    .appendTo(ul);
            };
        });
    </script>

    <div class="example">
        <h2 class="exampleTitle">Suggestions with Hit Highlighting</h2>
        <br />
        <div class="searchBoxForm">
            <input class="searchBox" type="text" id="example1b" placeholder="search">
            <input type="submit" class="searchBoxSubmit">
        </div>
    </div>
    <br />

    <script>
        $(function () {
            $("#example2").autocomplete({
                source: "/home/autocomplete",
                minLength: 3,
                position: {
                    my: "left top",
                    at: "left-23 bottom+10"
                }
            });
        });
    </script>

    <div class="example">
        <h2 class="exampleTitle">Autocomplete</h2>
        <div class="exampleText">
            Autocomplete provides terms that are in the index and help the user complete what they are currently typing.  This helps to user write their search terms as they get recommendation for words and phrases that appear in the index.  This can also be used to provide recommendations for search terms that have been previously been used by other users.
            You can use the <a href="TBD">AUTOCOMPLETE</a> method on the Azure Search REST API to retrieve words that complete a given search term.<br /><br />
            Example: Give "business a" a try in the box below to see what the AUTOCOMPLETE API returns.
        </div>
        <br />
        <div class="searchBoxForm">
            <input class="searchBox" type="text" id="example2" placeholder="search">
            <input type="submit" class="searchBoxSubmit">
        </div>
    </div>
    <br />

    <script>
        $(function () {
            $.widget("custom.catcomplete", $.ui.autocomplete, {
                _create: function () {
                    this._super();
                    this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)");
                },
                _renderMenu: function (ul, items) {
                    var that = this,
                        currentCategory = "";
                    $.each(items, function (index, item) {
                        var li;
                        if (item.category != currentCategory) {
                            ul.append("<li class='ui-autocomplete-category'>" + item.category + "</li>");
                            currentCategory = item.category;
                        }
                        li = that._renderItemData(ul, item);
                    });
                }
            });

            $("#example3").catcomplete({
                source: "/home/both",
                minLength: 3,
                position: {
                    my: "left top",
                    at: "left-23 bottom+10"
                }
            });
        });
    </script>

    <div class="example">
        <h2 class="exampleTitle">Both Suggestions and Autocomplete</h2>
        <div class="exampleText">
            You can bring both Suggestions and Autocmplete together into into the same list to create a search experience similar to Xbox.com.
            <br /><br />
            Example: Give "const" a try in the box below to see what the AUTOCOMPLETE API returns.
        </div>
        <br />
        <div class="searchBoxForm">
            <input class="searchBox" type="text" id="example3" placeholder="search">
            <input type="submit" class="searchBoxSubmit">
        </div>
    </div>
    <br />

    <script>
        $(function () {
            $.getJSON("facets", function (data) {
                $("#example4").autocomplete({
                    minLength: 3,
                    position: {
                        my: "left top",
                        at: "left-23 bottom+10"
                    },
                    source: data
                });
            });
        });
    </script>

    <div class="example">
        <h2 class="exampleTitle">Facets</h2>
        <div class="exampleText">
            Both suggestions and autocomplete require a roundtrips to the Azure Search index to retrieve recommendations.  This can introduce a delay depending on the network speed of the user.  Another technique to consider is using a facet to retrieve all unique values for a field and cache them on the client when the application page loads.  This is helpful in situations where you are building a search box targeting values in a single field.
            <br /><br />
            Example: Give "dept" a try in the box below to see what the AUTOCOMPLETE API returns.
        </div>
        <br />
        <div class="searchBoxForm">
            <input class="searchBox" type="text" id="example4" placeholder="search">
            <input type="submit" class="searchBoxSubmit">
        </div>
    </div>
    <br /><br /><br /><br /><br /><br /><br /><br />
    <br /><br /><br /><br /><br /><br /><br /><br />
</div>